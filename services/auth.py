import os
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (username –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –±–µ–∑ +)
allowed_users_raw = os.getenv("ALLOWED_USERNAMES", "")
ALLOWED_USERNAMES = [
    user.strip() for user in allowed_users_raw.split(",") if user.strip()
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –±–æ—Ç–∞
AUTHORIZED_USERS = set()


def get_user_identifier(update: Update) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)."""
    user = update.effective_user
    if user.username:
        return user.username
    contact = update.message.contact if update.message else None
    if contact and contact.phone_number:
        return contact.phone_number.replace("+", "")
    return None


def is_user_allowed(identifier: str) -> bool:
    return identifier in ALLOWED_USERNAMES


def authorize_user(identifier: str) -> bool:
    if is_user_allowed(identifier):
        AUTHORIZED_USERS.add(identifier)
        return True
    return False


def is_user_authorized(identifier: str) -> bool:
    return identifier in AUTHORIZED_USERS


# === /start –∫–æ–º–∞–Ω–¥–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    # –ï—Å–ª–∏ –µ—Å—Ç—å username ‚Äî –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ –Ω–µ–º—É
    if user.username:
        identifier = user.username
        if authorize_user(identifier):
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, @{identifier}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã."
            )
        else:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    else:
        # –ù–µ—Ç username ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        keyboard = [[button]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        )
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
            reply_markup=reply_markup,
        )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ===
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contact = update.message.contact

    # üîê –ó–∞—â–∏—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–í–û–ô –Ω–æ–º–µ—Ä
    if contact.user_id != update.effective_user.id:
        await update.message.reply_text(
            "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ –°–í–û–ò–ú –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )
        return

    if contact and contact.phone_number:
        phone = contact.phone_number.replace("+", "")
        if authorize_user(phone):
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            )
        else:
            await update.message.reply_text(
                "‚õîÔ∏è –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."
            )
    else:
        await update.message.reply_text("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
