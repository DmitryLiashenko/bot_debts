from telegram import Update
from telegram.ext import ContextTypes
from services.auth import is_user_authorized
from services.get_last_modified import get_last_modified
from services.google_sheets import (
    get_debts_data,
    creds,
    SOURCE_SPREADSHEET_ID,
)


async def debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_user_authorized(user.username):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start."
        )
        return

    try:
        result_messages = get_debts_data()
        for message in result_messages:
            await update.message.reply_text(message, parse_mode="Markdown")

        formatted_time = get_last_modified(creds, SOURCE_SPREADSHEET_ID)
        await update.message.reply_text(
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {formatted_time}"
        )

        if int(result_messages[-1].splitlines()[-1]) < 0:
            await update.message.reply_text(
                "üí∏ –ö–∞—Å—Å–∞ –≤ –º–∏–Ω—É—Å–µ ‚Äî –ø–æ—Ä–∞ —Å–¥–∞–≤–∞—Ç—å –±—É—Ç—ã–ª–∫–∏!\nüë∑‚Äç‚ôÇÔ∏è –ú—É–∂–∏–∫–∏, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±—É–¥–µ—Ç–µ?!"
            )
        else:
            await update.message.reply_text("–û,–º–æ–∂–Ω–æ –∏ –ø–æ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—é–∂–∫—É)))")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
